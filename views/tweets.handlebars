<div class="row justify-content-center my-3">
  <div class="col-md-6">
    <form action="/tweets" method="POST" id="tweetForm" onsubmit="addTagId()">
      <div id="text-wrap" style="position: relative;">
        <div id="textarea" contenteditable="true" placeholder="what's on your mind?"></div>
        <p id="tweetInput" style="position: absolute; top: 1px; left: 1px;"></p>
      </div>

      <div class="input-group">
        <textarea id="tweets" name="tweets" class="form-control" aria-label="With textarea"
          placeholder="what's on your mind?" rows="3" style="display: none;"></textarea>
      </div>
      <div class="text-muted mt-1">
        <small id="tweetsText" class="mr-1">characters left:</small>
        <span id="tweetsNumber" class="align-middle">140</span>
        <button id="tweetBtn" class="btn btn-primary float-right" type="submit">Tweet</button>
      </div>
    </form>

    <br>
    <br>
    {{#each tweets}}
    <div class="card mb-3" style="max-width: 540px;">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="{{this.User.avatar}}" class="card-img" alt="user avatar">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">
              <a href="/users/{{ this.User.id }}/tweets">{{ this.User.name }}</a>
            </h5>
            <p class="card-text" style="overflow: hidden; text-overflow: ellipsis; white-space:nowrap">
              {{{ this.description }}}</p>
            <p class="card-text"><small class="text-muted">{{ fromNow this.createdAt }}</small></p>
          </div>
          <div class="card-body text-right inline-block mt-1">
            <a href="/tweets/{{this.id}}/replies" class="btn btn-primary mr-2">Reply({{ this.replyCount }})</a>
            {{#if this.isLiked }}
            <form action="/tweets/{{this.id}}/unlike" method="POST" style="display: contents;">
              <button type="submit" class="btn btn-danger">
                <i class="fa fa-heart" aria-hidden="true" onsubmit="clearTagId()"></i>
                unlike({{ this.likedCount }})
              </button>
            </form>
            {{else}}
            <form action="/tweets/{{this.id}}/like" method="POST" style="display: contents;">
              <input type="hidden" name="userId" value="{{this.id}}" />
              <button type="submit" class="btn btn-primary">
                <i class="fa fa-heart" aria-hidden="true"></i>
                like({{ this.likedCount }})
              </button>
            </form>
            {{/if}}
          </div>
        </div>
      </div>
    </div>
    {{/each}}
  </div>
  <div class="col-md-4">
    <p class="h1">Popular Users</p>
    <br>
    {{#each users}}
    <div class="card mb-3" style="max-width: 400px;">
      <div class="row no-gutters">
        <div class="col-md-4">
          <img src="{{this.avatar}}" class="card-img" alt="user avatar">
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">
              <a href="/users/{{this.id}}/tweets">{{ this.name }}</a>
            </h5>
            <p style="overflow: hidden; text-overflow: ellipsis; white-space:nowrap" class="card-text">
              {{ this.introduction}}</p>
            {{#ifNotCond this.id ../user.id}}
            {{#if this.isFollowed }}
            <form class="text-right" action="/followships/{{this.id}}?_method=DELETE" method="POST">
              <button type="submit" class="btn btn-danger" name="id" value={{this.id}}>
                Unfollow <i class="fa fa-user" aria-hidden="true"></i>
              </button>
            </form>
            {{else}}
            <form class="text-right" action="/followships" method="POST">
              <input type="hidden" name="id" value={{this.id}}>
              <button type="submit" class="btn btn-info">
                Follow <i class="fa fa-user-plus" aria-hidden="true"></i>
              </button>
            </form>
            {{/if}}
            {{/ifNotCond}}
          </div>
        </div>
      </div>
    </div>
    {{/each}}
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.6.3/js/bootstrap-select.min.js"></script>


<script type="text/javascript">
  let lastInputTime
  let ifInputChangeBySelected = false
  const timeOut = 0.2 // second
  const socket = io()
  const textarea = document.getElementById('textarea')
  const tweetInput = document.getElementById('tweetInput')
  textarea.addEventListener('input', handleInputDebounce)
  tweetInput.addEventListener('input', tweetsLeft)

  async function markFriend(target) {
    try {
      getTweetsContent()
      let regExp = /^(.*\s+@\w+|@\w+)/
      const textDivdedHtml = target.replace(/&nbsp;/g, " ");

      let keyword = ''
      function getIndices(target) {
        let indices = []
        let idx = target.indexOf('@');
        while (idx != -1) {
          indices.push(idx);
          idx = target.indexOf('@', idx + 1);
        }
        return indices
      }
      if (regExp.test(textDivdedHtml)) {

        //當資料變多可以用keyword進資料庫先篩選
        const indices = await getIndices(target)
        if (indices.length > 1) {
          keyword = target.slice(indices[indices.length - 1] + 1, indices[indices.length - 1] + 2)
        } else {
          keyword = target.slice(target.indexOf('@') + 1, target.length + 1)
        }

        //emit
        socket.emit('test', keyword)
        socket.on('tag', function (users) {
          tweetInput.innerHTML = ''
          const { searchedUsers } = users
          let selectTemp = ``
          selectTemp += `<select id="mySelect" onchange="tagFriend()"><option selected value="0" disabled>Tag your friend</option>`

          if (searchedUsers.length === 0) {
            selectTemp += `<option value="">查無用戶</option>`
          }

          for (const user of searchedUsers) {
            selectTemp += `<option value="${user.name}" data-id="${user.id}" data-thumbnail="${user.avatar}">${user.name}</option>`
          }

          selectTemp += `</select>`
          let textareaTemp = textarea.innerHTML.slice(0, indices[indices.length - 1] + 1) + selectTemp

          tweetInput.innerHTML = textareaTemp

          textarea.contentEditable = false
        })
      }
    } catch (error) {
      console.log('error', error)
    }
  }

  function getTweetsContent() {
    document.getElementById('tweets').value = document.getElementById('textarea').innerHTML
    tweetsLeft()
  }

  function tagFriend() {

    ifInputChangeBySelected = true
    const mySelect = document.getElementById("mySelect");
    const options = document.querySelectorAll('option')

    let template = ``

    if (mySelect.value === '') {
      const textareaTemp = textarea.innerHTML

      let indices = []
      let idx = textareaTemp.indexOf('@');
      while (idx != -1) {
        indices.push(idx);
        idx = textareaTemp.indexOf('@', idx + 1);
      }
      const resultTemp = textareaTemp.slice(0, indices[indices.length - 1])
      //合併輸出
      textarea.innerHTML = resultTemp + template
      tweetInput.innerHTML = resultTemp + template
    }
    else {
      for (const option of options) {
        if (option.value === mySelect.value) {
          template = `<a href="/users/${option.dataset.id}/tweets" data-id="${option.dataset.id}">@${option.value}</a>`
        }
      }

      //取得@之前字串
      const textareaTemp = textarea.innerHTML

      let indices = []
      let idx = textareaTemp.indexOf('@');
      while (idx != -1) {
        indices.push(idx);
        idx = textareaTemp.indexOf('@', idx + 1);
      }
      const resultTemp = textareaTemp.slice(0, indices[indices.length - 1])
      //合併輸出
      textarea.innerHTML = resultTemp + template
      tweetInput.innerHTML = resultTemp + template

    }

    getTweetsContent()
    textarea.contentEditable = "true";
  }

  function tweetsLeft() {
    const tweets = document.getElementById('tweets').value
    const stringInput = tweets.replace(/(&nbsp;)|<[^>]*>?/gm, '')

    let tweetsCount = 140 - stringInput.length
    const tweetsRemain = document.getElementById('tweetsNumber')
    const tweetsTitle = document.getElementById('tweetsText')
    const tweetsButton = document.getElementById('tweetBtn')

    if (tweetsCount <= 0) {
      tweetsRemain.className = "text-danger"
      tweetsRemain.textContent = 'Tweets exceed 140'
      tweetsButton.disabled = true
      tweetsTitle.style.display = 'none'
    } else {
      tweetsRemain.className = "text-muted"
      tweetsRemain.textContent = tweetsCount
      tweetsButton.disabled = false
      tweetsTitle.style.display = 'inline'
    }
  }

  async function handleInputDebounce(e) {
    const target = e.target.innerHTML

    const current = Date.now()
    lastInputTime = current
    await sleep(timeOut)

    if (lastInputTime != current) { console.log('debounce') }
    else if (ifInputChangeBySelected === true) {
      ifInputChangeBySelected = false
    }
    else {
      markFriend(target)
    }

    tweetInput.innerHTML = ''
    getTweetsContent()
  }

  function sleep(second) {
    return new Promise(wake => setTimeout(wake, second * 1000))
  }

  function addTagId() {
    const getDatasetId = textarea.getElementsByTagName('A')
    if (getDatasetId.length > 0) {
      let tagId = []
      for (let i = 0; i < getDatasetId.length; i++) {
        tagId.push(getDatasetId[i].dataset.id)
      }
      for (let i = 0; i < tagId.length; i++) {
        const tagInput = document.createElement('input')
        tagInput.setAttribute('name', 'taggedId')
        tagInput.setAttribute('value', Number(tagId[i]))
        tagInput.setAttribute('type', 'hidden')
        tagInput.setAttribute('id', 'taggedId')
        document.getElementById('tweetForm').appendChild(tagInput)
      }
    }
    return
  }
</script>